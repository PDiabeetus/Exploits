local ContextActionSevice=game:GetService("ContextActionService")
local RunService=game:GetService("RunService")
local State=nil
local Character=game.Players.LocalPlayer.Character
local HumanoidRootPart=Character.HumanoidRootPart
local GravityVector=Vector3.new(0, game.Workspace.Gravity, 0)
local yAxis=0
local IntValue=Instance.new("IntValue", script)
task.wait(1)
local Force=IntValue
local Drag=1.8

script.Parent=Character

local VectorForce=Instance.new("VectorForce", script)
local AlignOrientation=Instance.new("AlignOrientation", script)

VectorForce.Enabled=false
VectorForce.Force=Vector3.new(0, 0, 0)
VectorForce.RelativeTo=Enum.ActuatorRelativeTo.World
VectorForce.Attachment0=HumanoidRootPart.RootAttachment

AlignOrientation.Enabled=false
AlignOrientation.Mode=Enum.OrientationAlignmentMode.OneAttachment
AlignOrientation.MaxTorque=99999999999999999999
AlignOrientation.Responsiveness=30
AlignOrientation.Attachment0=HumanoidRootPart.RootAttachment

local Animation=Instance.new("Animation", script)
local AnimationID="http://www.roblox.com/asset/?id=180426354"
Animation.AnimationId=AnimationID
local AnimationTrack=Character.Humanoid.Animator:LoadAnimation(Animation)
AnimationTrack.Priority=Enum.AnimationPriority.Movement

local function Fly(ActionName, InputState, InputObject)
	if InputState~=Enum.UserInputState.Begin then return Enum.ContextActionResult.Pass end
	if State==true then return Enum.ContextActionResult.Pass end
	if State==nil then
		State=true
		if Character.Humanoid.FloorMaterial~=Enum.Material.Air then
			Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			task.wait(0.1)
		end
		VectorForce.Enabled=true
		AlignOrientation.CFrame=HumanoidRootPart.CFrame
		AlignOrientation.Enabled=true
		AnimationTrack:Play()
		Character.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
		State=RunService.Heartbeat:Connect(function(DeltaTime)
			VectorForce.Force=GravityVector*HumanoidRootPart.AssemblyMass
			local MoveVector=Vector3.new(Character.Humanoid.MoveDirection.X, yAxis, Character.Humanoid.MoveDirection.Z)
			if MoveVector.Magnitude > 0 then
				MoveVector=MoveVector.Unit
				VectorForce.Force+=MoveVector*Force*HumanoidRootPart.AssemblyMass
				if math.abs(MoveVector.Y)==1 then
					AlignOrientation.CFrame=CFrame.lookAt(Vector3.new(0, 0, 0), MoveVector, -HumanoidRootPart.CFrame.LookVector)*CFrame.fromOrientation(-math.pi / 2, 0, 0)
				else
					AlignOrientation.CFrame=CFrame.lookAt(Vector3.new(0, 0, 0), MoveVector)*CFrame.fromOrientation(-math.pi	/ 2, 0, 0)
				end
			end
			if HumanoidRootPart.AssemblyLinearVelocity.Magnitude > 0 then
				local DragVector=-HumanoidRootPart.AssemblyLinearVelocity.Unit*HumanoidRootPart.AssemblyLinearVelocity.Magnitude^1.2
				VectorForce.Force+=DragVector*Drag*HumanoidRootPart.AssemblyMass
			end
		end)
	else
		VectorForce.Enabled=false
		AlignOrientation.Enabled=false
		AnimationTrack:Stop()
		Character.Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
		State:Disconnect()
		State=nil
	end
	return Enum.ContextActionResult.Pass
end

local function FlyUp(ActionName, InputState, InputObject)
	if InputState==Enum.UserInputState.Begin then yAxis=1 else yAxis=0 end
	return Enum.ContextActionResult.Pass
end

local function FlyDown(ActionName, InputState, InputObject)
	if InputState==Enum.UserInputState.Begin then yAxis=-1 else yAxis=0 end
	return Enum.ContextActionResult.Pass
end

ContextActionSevice:BindAction("Fly", Fly, false, Enum.KeyCode.F1)
ContextActionSevice:BindAction("FlyUp", FlyUp, false, Enum.KeyCode.E)
ContextActionSevice:BindAction("FlyDown", FlyDown, false, Enum.KeyCode.Q)
